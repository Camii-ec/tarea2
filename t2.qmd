---
title: "Tarea 2"
subtitle: "EYP3407 - Tópicos Aplicados en estadística"
author: 
    - Camila Echeverría
    - Francisca Vilca
format:
    html:
        code-fold: false
        embed-resources: true
        toc: true
        toc-title: "Contenidos"
---

## Pregunta 1

## Pregunta 2

```{python}
#| warning: false
#| message: false
#| results: hide

## Librerías Python

# Tratamiento
import pandas as pd
import numpy as np

# Gráfico
import matplotlib.pyplot as plt
from matplotlib import style
import seaborn as sns

# Preprocesamiento
from scipy.stats import pearsonr
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Ridge 
from sklearn.linear_model import Lasso
from sklearn.linear_model import ElasticNet
from sklearn.linear_model import RidgeCV 
from sklearn.linear_model import LassoCV
from sklearn.linear_model import ElasticNetCV

# Configuración matplotlib
plt.rcParams['image.cmap'] = "bwr"
plt.rcParams['savefig.bbox'] = "tight"
style.use('ggplot') or plt.style.use('ggplot')

# Configuración warnings
import warnings
warnings.filterwarnings('ignore')
```


```{python}
datos = pd.read_excel('hitters.xlsx')
datos.info()
```

```{python}
# Correlación entre columnas numéricas
# ==============================================================================

#Esto es para darle un formato bonito a la matriz de correlación
def tidy_corr_matrix(corr_mat):
    '''
    Función para convertir una matriz de correlación de pandas en formato tidy
    '''
    corr_mat = corr_mat.stack().reset_index() #El stack transforma las matrices para que sean más visuales, mientras que el reset_index resetea el índice no más, tal cual
    corr_mat.columns = ['variable_1','variable_2','r']
    corr_mat = corr_mat.loc[corr_mat['variable_1'] != corr_mat['variable_2'], :] #Para que elimine todas las correlaciones de las diagonales, que son todas 1
    corr_mat['abs_r'] = np.abs(corr_mat['r'])
    corr_mat = corr_mat.sort_values('abs_r', ascending=False)
    
    return(corr_mat)

corr_matrix = datos.select_dtypes(include=['float64', 'int'])\
              .corr(method='pearson') #Para que seleccione todos los números. El \ es un equivalente al pipe, para que la weá corra en más de una línea

tidy_corr_matrix(corr_matrix).head(10)
```

```{python}
# Heatmap matriz de correlaciones
# ==============================================================================
fig, ax = plt.subplots(nrows=1, ncols=1, figsize=(6, 6))

sns.heatmap(
    corr_matrix,
    square    = True,
    ax        = ax
)

ax.tick_params(labelsize = 3)
```

### Esto pa la b

```{python}
# División de los datos en train y test
# ==============================================================================
X = datos.drop(columns='Salary')
y = datos['Salary']

X_train, X_test, y_train, y_test = train_test_split(
                                        X,
                                        y.values.reshape(-1,1),
                                        train_size   = 0.7,
                                        random_state = 3312,
                                        shuffle      = True
                                    )
```

Mínimos cuadrados ordinarios 

```{python}
# Creación y entrenamiento del modelo
# ==============================================================================
modelo = LinearRegression()
modelo.fit(X = X_train, y = y_train)
```

